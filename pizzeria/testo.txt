# Esercizio: Simulazione Pizzeria Multi-Thread

## Traccia

Implementare una simulazione di una pizzeria utilizzando thread e semafori in C. La pizzeria è composta da tre attori principali che devono coordinarsi:

### Attori:
1. **Cameriere** - Riceve gli ordini dai clienti
2. **Pizzaiolo** - Prepara le pizze ordinate  
3. **Fattorino** - Consegna le pizze ai clienti

### Funzionamento:

#### File di Input:
- `ordini.txt`: contiene nome cliente, tipo pizza, indirizzo (una riga per ordine)
- `prezzi.txt`: contiene tipo pizza e prezzo corrispondente
- `tempi_preparazione.txt`: contiene tipo pizza e tempo di preparazione in secondi

#### Flusso di Lavoro:
1. Il **Cameriere** legge tutti gli ordini dai file all'avvio
2. Per ogni ordine:
   - Il **Cameriere** seleziona un ordine e avvisa il **Pizzaiolo**
   - Il **Pizzaiolo** riceve l'ordine, simula la preparazione (sleep) e avvisa il **Fattorino**  
   - Il **Fattorino** riceve la pizza pronta e simula la consegna (sleep), poi avvisa il **Cameriere**
3. Il ciclo continua fino a completare tutti gli ordini

### Strutture Dati Suggerite:

```c
typedef struct {
    char cliente[50];
    char tipo_pizza[30];
    char indirizzo[100];
    double prezzo;
    int tempo_preparazione;
    int tempo_consegna;
} Ordine;

typedef struct {
    Ordine ordine_corrente;
    sem_t cameriere_pronto;
    sem_t pizzaiolo_pronto;  
    sem_t fattorino_pronto;
    int termina_simulazione;
} DatiCondivisi;
```

### Requisiti di Implementazione:

1. **Sincronizzazione**: Utilizzare semafori per coordinare i tre thread
2. **Gestione terminazione**: Implementare una cascata di terminazione corretta
3. **Statistiche**: Ogni thread deve tenere traccia delle proprie statistiche:
   - Cameriere: numero ordini processati, incasso totale
   - Pizzaiolo: numero pizze preparate, tempo totale di preparazione
   - Fattorino: numero consegne, tempo totale di consegna

### Output Atteso:
Durante l'esecuzione stampare messaggi informativi come:
```
Cameriere: Nuovo ordine per Mario - Pizza Margherita
Pizzaiolo: Sto preparando Pizza Margherita (3 secondi)
Pizzaiolo: Pizza Margherita pronta per la consegna!
Fattorino: Consegno Pizza Margherita a Mario in Via Roma (2 secondi)
Fattorino: Consegna completata!
```

Al termine stampare le statistiche finali di ogni attore.

### Suggerimenti:
- Il **Cameriere** crea gli altri due thread
- Gestire correttamente la terminazione: quando finiscono gli ordini, il Cameriere deve segnalare agli altri thread di terminare
- Usare `pthread_join()` per aspettare la terminazione dei thread figli
- Implementare funzioni di lettura file per caricare prezzi e tempi

### Bonus:
- Implementare la possibilità di avere più pizzaioli/fattorini contemporaneamente
- Aggiungere la gestione di pizze "speciali" che richiedono più tempo
- Simulare occasionali ritardi casuali nelle consegne